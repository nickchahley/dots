[core]
	editor = nvim

[user]
	email = nickchahley@gmail.com
	name = nickchahley

[color]
	ui = true

[alias]
	su       = submodule update
	gst      = status
	s        = status --short
	a        = add
	au       = add --update
	aa       = add --all
	ci       = commit
	co       = checkout
	sw       = switch
	br       = branch
	brr      = branch -r
	undosoft = reset 'HEAD@{1}'
	unstage  = restore --staged
	un       = restore --staged
	d        = diff
	dt       = difftool
	df       = diff-files
	di       = diff-index
	dT       = diff-tree
	last     = log -1 HEAD
	l        = log
	lo       = log --oneline
	loh      = log --oneline -n10
	lp       = log --patch       # Show file changes along with log
	rp       = rev-parse --short
	rph      = rev-parse --short HEAD
	staash   = stash --all
	fpr      = fetch origin +refs/pull/*:refs/remotes/origin/pull/*

	diff1 = diff HEAD~1 HEAD
	diff2 = diff HEAD~2 HEAD~1

	bl = blame -w -C -C -C # ignore whitespace, follow lines moved or copied (refactored)

	# Pretty git logs
	lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg = !"git lg1"
	lgh = !"git lg -n10"

    parent = "!git show-branch | grep '*' | grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//' #"
	mf = mergetool -t fugitive

[branch]
	# When creating a new branch off a remote branch, always set it up to
	# track the remote branch so that we can pull from there.
	autoseupmerge = always
	sort = -committerdate

[branch "main"]
	# Comment is from not me, but a good explanation
	#
	# This is the list of cmdline options that will be added to `git merge`
	# when I merge commits into the main branch.
	#
	# First off, the option --no-commit instructs git not to commit the merge
	# by default. This allows me to do some final adjustment to the commit log
	# message before it gets committed. I often use this to add extra info to
	# the merge message or rewrite my local branch names in the commit message
	# to branch names sensible to the casual reader of the git log.
	#
	# Option --no-ff instructs git to always record a merge commit, even if
	# the branch being merged into can be fast-forwarded. This is often the
	# case when you create a short-lived topic branch which tracks main, do
	# some changes on the topic branch and then merge the changes into the
	# main which remained unchanged while you were doing your work on the
	# topic branch. In this case the main branch can be fast-forwarded (that
	# is the tip of the main branch can be updated to point to the tip of
	# the topic branch) and this is what git does by default. With --no-ff
	# option set git creates a real merge commit which records the fact that
	# another branch was merged. I find this easier to understand and read in
	# the log.
	mergeoptions = --no-commit

[diff]
	# Histogram is most modern algo, who knows if it is best
	algorithm = histogram
	tool = nvimdiff

[init]
	defaultBranch = main

[credential]
	helper = cache
[rerere]
	enabled = true
[column]
	ui = auto

[mergetool]
	prompt = false
[mergetool "fugitive"]
	cmd = nvim -d -c \"wincmd l\" \"$LOCAL\" \"$MERGED\" \"$REMOTE\"
[merge]
	# Include the summary of merged commits into all newly created merge
	# commits. The newly created merge commit will contain a one-line summary
	# of every (well, most) merged commits.
	log = true

	# Show merge statistics after merge.
	stat = true
	tool = fugitive

	# tool = "nvimdiff"
	# conflictstyle = diff3
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
